

A idéia de um fluxo tradicional de ci/cd no git é que ao comitarmos nosso código fonte no repositório é disparado um processo que valida nosso código, gera testes automatizados, eventualmente gera alguma documentação (CI) e que caso passe nessa etapa que gera uma imagem/build de nossa aplicação (CD) que será deployada no ambinete de produção (no cluster kubernetes por exemplo). Porém apesar desstas etapas não há uma garantia que o que está no git é de fato o que está em produção, pode ocorrer alguma interveção manual ou falha em algum dos passos do processo.

O conceito de GitOps é garantir que o que está no meu repositório git é o oque está no meu ambiente de produção. Para isso existe uma camada agente que uma vez que foi declarado através de um commit que a versão x do repositório é a ultima, então esse agente sempre fica monitorando o que está no ambinete de produção e no git e garante que a versão seja sempre a mesma no dois.

No curso será feito uma webserver hello world que quando o repositório do memso for alterado, deverá ser publicaod no cluster kubernetes. O agent utlizado será o argocd.

Se tiver o runtime do Go na maquina dar um go init nome do modulo e no diretório feito isso será criado o arquivo go.mod que é como se fosse um package.json do node. Eu apenas copiei esse arquivo do repositório da aula (não quis instalar o go). Também foi criado main.go que é o Hello world que respode na porta 8080. Foi criado um Dockerfile para gerar a imagem com nosso Hello world.

Após a criação do Dockerfile rodar o comando do build do mesmo:

docker build -t lalausan/gitopsfc:latest .

Depois subir a imagem pra ver se a mesma está funcionando:

Usar o comando "docker login"

Entrar com o user e senha da conta do dockerhub

docker push lalausan/gitopsfc:latest


Criar fluxo de geração de imagem
---------------------------------

Para criação do workflow, foi criada a pasta .github e dentro dela a pasta workflows e o arquivo cd.yaml dentro da mesma. esta pasta será comitada em algum repositório para configurar o workflow especificado pelo .yaml.

Deposi foi criado um novo repositório público em minha conta github com o nome gitopsfc. depois de criado em em settings com o repositório selecionado e em secretes and variables -> actions. E criar as secrets necessárias que estão sendo usadas no arquivo cd.yaml (ver arquivo), foram criadas as secrets do nome do usuario docker hub (lalausan), senha do repositório docker hub. Na senha tem que ser passado um token de acesso que é gerado lá na conta do docker hub, entrar lá em conta, segurança, pegar um existente ou criar um token.

Após isso na pasta local onde possui o fontes go, pasta .github e dockerfile dar os comanos para subir os arquivo locais para o repositório git criado:

git init

git add .

git commit -m "first commit"

git branch -M main

git remote add origin https://github.com/LaerteNF/gitopsfc.git

git push -u origin main

Após comitar no main o git actions já comecará a rodar, executando as ações especificadas no cd.yaml. Após a conclusão, podemos ver uma nova imagem gerada no docker hub, essa imagem foi gerada com a tag com codigo sha aleatório.


Criando manifestos Kubernetes
-------------------------------

Nas aulas foram usados um cluster kubernetes kind, criar o novo cluster:

kind create cluster --name=gitopsfc

Depois de criado, mudar o contexto para o mesmo:

kubectl cluster-info --context kind-gitopsfc

Depois na nossa pasta de trabalho (Gfullcycle/GitOps) onde estão todos nosso arquivo foi criada também a pasta k8s e dentro dela os arquivo deployment.yaml e
service.yaml. O deployment.yaml cria um container de nome 'goserver' com a imagem 'goserver' e labels 'goserver'. Essa imagem não existe, será explicado nos proximos passos.

Kustomize
-----------------------

Kustomize é uma ferramenta de linha de comando desenvolvida pela equipe do Kubernetes que permite a personalização e o gerenciamento de configurações do Kubernetes. Ele permite que você defina e modifique recursos Kubernetes usando patches e overlays, sem a necessidade de editar diretamente os arquivos YAML originais.

Com o Kustomize, você pode ter um conjunto básico de arquivos YAML e aplicar modificações específicas em diferentes ambientes, como desenvolvimento, teste e produção, sem precisar duplicar ou modificar manualmente os arquivos YAML originais. Ele ajuda a manter a consistência e a reutilização de configurações em diferentes ambientes.

O Kustomize será rodado apenas lá na máquina de build do gitactions.

Foi criado o arquivo kustomize.yaml que referencia os arquivos deployment.yaml e service.yaml, nesse arquivo referenciamos a imagem 'goserver' que é o nome colocado no deployment.yaml (apenas nome ficticio) e com essa referencia feita a esse arquivo configuramos que o novo nome dessa imagem é 'lalausan/gitopsfc' (imagem que existe) e passamos também o novo valor de tag que será pego do sha (codigo aleatorio unico) no gitactions, ou seja, o kustomize.yaml modificará os valores do deployment (nos proximos passos a frente na parte do argocd).

Quando o código for comitado no git, o campo tag do Kustomization.yaml será atualizado com uma nova tag sha e dessa forma o agent (argo) verificará que essa tag está
diferente da imagem no cluster, disparando assim então a atulização do kluster com a nova imagem (será explicado melhor nos proximos passos).

No arquivo cd.yaml (ver arquivo) que é lido pelo gitaction foi adicionada as instruções do kustomize onde a ele instala o kustomize na maquina do gitaction onde será feito o build 
e roda o comando kustomize para atribuir ao objeto image definido no kustomization.yaml os valores de nome da imagem ('lalausan/gitopsfc' já estava assim por default) e também o tag sha. Ou seja nesse trecho quando rodar lá no action do git, fará com que o valor tag será do arquivo kustomization.yaml seja alterado, que por sua vez
seta esses valores no deploymnet.yaml. Como houve alteração no Kustomize, o agente irá publicar a nova imagem. Após as alterações no cd.yaml comitar as mesmas:

git add . 
git commit -m "cd"
git push origin main

APós esse passos, oque efetivamente terá sido feito é:

A imagem nova foi gerada e enviada para o Dokcer hub (já estava fazendo isso desde o passo Criar fluxo de geração de imagem)

E foi alterado o kustomization.yaml no repositrório com o valor da newTag sendo o sha (codigo aleatorio) gerado pelo gitAction

Apenas isso, todo esse passo foi feito apenas para gerar essa nova tag com um valor novo para que nos proximos passos o Argo consiga captar que houve
uma alteração no repositório e faça a publicação da nova imagem.

Entrar na pasta k8s e dar um apply  na mesma

Kubectl apply -f .

Esse passo é necessário para subir o deployment goserver (com imagem vazia ainda) e o service porque precisa ter algo no ar para o Argo comparar nos próximos passos.


Instalando ArgoCD
------------------------------------





